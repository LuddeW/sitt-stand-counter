{"version":3,"sources":["serviceWorker.js","TimerHeader/components/TimerHeader.jsx","TimerDisplay/components/TimerDisplay.jsx","TimerStates.js","TimerButton/components/TimerButon.jsx","TimerConfig/components/TimerConfig.jsx","Timer/components/Timer.jsx","App.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","unregister","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","Header","react_default","a","createElement","className","leftPad","val","concat","Display","props","currentTime","get","NOT_SET","Button","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getButton","bind","assertThisInitialized","timerState","timerStates","onClick","startTimer","stopTimer","Component","Config","handleChange","ev","newBaseTime","baseTime","target","id","subtract","add","parseInt","value","setBaseTime","htmlFor","type","min","max","defaultValue","onChange","Timer","state","moment","duration","timer","reduceTimer","localStorage","getItem","setState","nextProps","nextState","setItem","setInterval","clearInterval","newTime","completeTimer","Push","create","body","timeout","TimerHeader","TimerDisplay","TimerButon","TimerConfig","App","components_Timer","r","global","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","_App__WEBPACK_IMPORTED_MODULE_3__","_serviceWorker__WEBPACK_IMPORTED_MODULE_4__","jQuery","require","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9e94458.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className=\"row\">\r\n          <h2 className=\"mx-auto\">SitStandCounter</h2>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst leftPad = (val) => {\r\n    if(val < 10) return `0${val}`;\r\n    \r\n    return `${val}`;\r\n}\r\n\r\nconst Display = (props) => (\r\n    <div className=\"row\">\r\n        <h2 className=\"mx-auto\">{`${leftPad(props.currentTime.get('minutes'))}:${leftPad(props.currentTime.get('seconds'))}`}</h2>\r\n    </div>\r\n    \r\n);\r\n\r\nexport default Display;","export const NOT_SET = 0;\r\nexport const RUNNING = 1;\r\nexport const COMPLETE = 2;","import React, { Component } from 'react';\r\nimport * as timerStates from '../../TimerStates.js';\r\nclass Button extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.getButton = this.getButton.bind(this);\r\n    }\r\n\r\n    getButton(){\r\n        if(this.props.timerState === timerStates.NOT_SET)\r\n            return (<button className=\"btn btn-success mx-auto\" onClick={this.props.startTimer}>Start</button>)\r\n            \r\n        if(this.props.timerState === timerStates.RUNNING)\r\n            return (<button className=\"btn btn-danger mx-auto\" onClick={this.props.stopTimer}>Stop</button>)\r\n\r\n        if(this.props.timerState === timerStates.COMPLETE)\r\n            return (<button className=\"btn btn-info mx-auto\" onClick={this.props.stopTimer}>Reset</button>)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row\">\r\n                {this.getButton()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\n\r\nclass Config extends Component {\r\n  constructor(){\r\n    super();\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(ev){\r\n    const newBaseTime = this.props.baseTime\r\n\r\n    if(ev.target.id === 'minutes') newBaseTime.subtract(newBaseTime.get('minutes'), 'minutes').add(parseInt(ev.target.value, 10), 'minutes')\r\n    if(ev.target.id === 'seconds') newBaseTime.subtract(newBaseTime.get('seconds'), 'seconds').add(parseInt(ev.target.value, 10), 'seconds')\r\n\r\n    this.props.setBaseTime(newBaseTime);\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"row\">\r\n        <h2 className=\"text-primary\">Set Timer Option</h2>\r\n        <div className=\"row control-row\">\r\n          <div className=\"form-inline\">\r\n            <div className=\"col-sm-3\">\r\n              <label htmlFor=\"minutes\">Minutes</label>\r\n            </div>\r\n            <div className=\"col-sm-9\">\r\n              <input \r\n                id=\"minutes\" \r\n                className=\"form-control\" \r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"60\" \r\n                defaultValue={this.props.baseTime.get('minutes')}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row control-row\"> \r\n          <div className=\"form-inline\">\r\n            <div className=\"col-sm-3\">\r\n              <label htmlFor=\"seconds\">Seconds</label>\r\n            </div>\r\n            <div className=\"col-sm-9\">\r\n              <input \r\n                id=\"seconds\" \r\n                className=\"form-control\" \r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"59\" \r\n                defaultValue={this.props.baseTime.get('seconds')}\r\n                onChange={this.handleChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Config;","import React, { Component } from 'react';\r\nimport moment, { min } from 'moment';\r\nimport Push from 'push.js';\r\nimport TimerHeader from '../../TimerHeader/components/TimerHeader.jsx'\r\nimport TimerDisplay from '../../TimerDisplay/components/TimerDisplay.jsx'\r\nimport TimerButton from '../../TimerButton/components/TimerButon.jsx'\r\nimport TimerConfig from '../../TimerConfig/components/TimerConfig.jsx'\r\nimport * as timerState from '../../TimerStates.js'\r\n\r\nclass Timer extends Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            currentTime: moment.duration(20, 'minutes'),\r\n            baseTime: moment.duration(20, 'minutes'),\r\n            timerState: timerState.NOT_SET,\r\n            timer: null,\r\n        }\r\n\r\n        this.setBaseTime = this.setBaseTime.bind(this);\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.stopTimer = this.stopTimer.bind(this);\r\n        this.reduceTimer = this.reduceTimer.bind(this);\r\n    }\r\n\r\n    componentWillMount(){\r\n        localStorage.getItem('time') && this.setState({\r\n            currentTime: moment.duration(localStorage.getItem('time')),\r\n            baseTime: moment.duration(localStorage.getItem('time'))\r\n        })\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState){\r\n        localStorage.setItem('time', (nextState.baseTime))\r\n    }\r\n\r\n    setBaseTime(newBaseTime){\r\n        this.setState({\r\n            baseTime: newBaseTime,\r\n            currentTime: newBaseTime\r\n        });\r\n    }\r\n\r\n    startTimer(){\r\n        this.setState({\r\n            timerState: timerState.RUNNING,\r\n            timer: setInterval(this.reduceTimer, 1000),\r\n        })\r\n\r\n\r\n    }\r\n\r\n    stopTimer(){\r\n        if(this.state.timer){\r\n            clearInterval((this.state.timer))\r\n        }\r\n        this.setState({\r\n            timerState: timerState.NOT_SET,\r\n            timer: null,\r\n            currentTime: moment.duration(this.state.baseTime),\r\n        })\r\n    }\r\n\r\n    reduceTimer(){\r\n        if(this.state.currentTime.get('minutes') === 0 \r\n            && this.state.currentTime.get('seconds') === 0){\r\n            this.completeTimer();\r\n            return;\r\n        }\r\n        const newTime = moment.duration(this.state.currentTime)\r\n        newTime.subtract(1, 'second')\r\n\r\n        this.setState({\r\n            currentTime: newTime,\r\n        })\r\n    }\r\n\r\n    completeTimer(){\r\n        if(this.state.timer){\r\n            clearInterval((this.state.timer))\r\n        }\r\n        this.setState({\r\n            timerState: timerState.COMPLETE,\r\n            timer: null,\r\n        })\r\n        Push.create(\"Time to change the table\", {\r\n            body: \"Time to stand or sit\",\r\n            timeout: 40000,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <TimerHeader />\r\n                <TimerDisplay \r\n                    currentTime={this.state.currentTime}\r\n                />\r\n                <TimerButton \r\n                    startTimer={this.startTimer} \r\n                    stopTimer={this.stopTimer}\r\n                    timerState={this.state.timerState}\r\n                />\r\n                {\r\n                    (this.state.timerState !== timerState.RUNNING)\r\n                        &&\r\n                        (<TimerConfig \r\n                        baseTime={this.state.baseTime}\r\n                        setBaseTime={this.setBaseTime}    \r\n                        />)    \r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Timer;","import React, { Component } from 'react';\nimport Timer from './Timer/components/Timer.jsx'\nimport './App.css';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"card app-content mx-auto\">\n        <div className=\"card-body\">\n          <Timer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nglobal.jQuery = require('jquery');\nrequire('bootstrap');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}